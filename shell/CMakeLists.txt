set(USE_SCRIPTING 1)

configure_file(config-ktexteditor.h.cmake ${CMAKE_CURRENT_BINARY_DIR}/config-ktexteditor.h )

configure_file(${CMAKE_CURRENT_SOURCE_DIR}/config-lingmo.h.cmake ${CMAKE_CURRENT_BINARY_DIR}/config-lingmo.h)

add_definitions(-DLINGMO_DEPRECATED=)

set(scripting_SRC
    scripting/appinterface.cpp
    scripting/applet.cpp
    scripting/containment.cpp
    scripting/configgroup.cpp
    scripting/panel.cpp
    scripting/scriptengine.cpp
    scripting/scriptengine_v1.cpp
    scripting/widget.cpp
)

set(lingmoshell_dbusXML dbus/org.kde.LingmoShell.xml)
qt_add_dbus_adaptor(scripting_SRC ${lingmoshell_dbusXML} shellcorona.h ShellCorona lingmoshelladaptor)

ecm_qt_declare_logging_category(lingmoshell HEADER debug.h
                                               IDENTIFIER LINGMOSHELL
                                               CATEGORY_NAME kde.lingmoshell
                                               DEFAULT_SEVERITY Info
                                               DESCRIPTION "lingmoshell"
                                               EXPORT LINGMOWORKSPACE)

ecm_qt_declare_logging_category(lingmoshell HEADER screenpool-debug.h
                                               IDENTIFIER SCREENPOOL
                                               CATEGORY_NAME kde.lingmoshell.screenpool
                                               DEFAULT_SEVERITY Info
                                               DESCRIPTION "lingmoshell screenpool"
                                               EXPORT LINGMOWORKSPACE
                                           )
set (lingmo_shell_SRCS
    alternativeshelper.cpp
    autohidescreenedge.cpp
    main.cpp
    containmentconfigview.cpp
    currentcontainmentactionsmodel.cpp
    desktopview.cpp
    panelview.cpp
    panelconfigview.cpp
    panelshadows.cpp
    shellcorona.cpp
    osd.cpp
    strutmanager.cpp
    debug.cpp
    screenpool-debug.cpp
    screenpool.cpp
    softwarerendernotifier.cpp
    shellcontainmentconfig.cpp
    ${scripting_SRC}
)

if (TARGET KF6::UserFeedbackCore)
    set(lingmo_shell_SRCS
        ${lingmo_shell_SRCS}
        userfeedback.cpp
    )
endif()

kconfig_add_kcfg_files(lingmo_shell_SRCS ../kcms/colors/colorssettings.kcfgc GENERATE_MOC)

add_executable(lingmoshell)
qt6_generate_wayland_protocol_client_sources(lingmoshell FILES
    ${LINGMO_WAYLAND_PROTOCOLS_DIR}/kde-screen-edge-v1.xml
    ${LINGMO_WAYLAND_PROTOCOLS_DIR}/lingmo-shell.xml
)

set(krunner_xml ${lingmo-workspace_SOURCE_DIR}/krunner/dbus/org.kde.krunner.App.xml)
qt_add_dbus_interface(lingmo_shell_SRCS ${krunner_xml} krunner_interface)


target_sources(lingmoshell PRIVATE ${lingmo_shell_SRCS})

target_link_libraries(lingmoshell
 KF6::ConfigCore # Activate KRunner on the desktop
 KF6::ConfigGui
 KF6::CoreAddons
 KF6::Crash
 KF6::DBusAddons
 KF6::GlobalAccel
 KF6::GuiAddons
 KF6::I18n
 KF6::KIOCore
 KF6::Package
 KF6::Notifications
 KF6::Service
 KF6::Solid
 KF6::StatusNotifierItem
 KF6::Svg
 KF6::WidgetsAddons
 KF6::WindowSystem
 KF6::XmlGui
 LayerShellQt::Interface
 Lingmo::Activities
 Lingmo::KWaylandClient
 Lingmo::Lingmo
 Lingmo::LingmoQuick
 PW::KWorkspace
 Qt::GuiPrivate # qpa/qplatformwindow_p.h
 Qt::Quick
 Qt::DBus
 Qt::WaylandClient
 Wayland::Client
)
target_link_libraries(lingmoshell KF6::ConfigQml)
if (TARGET KF6::UserFeedbackCore)
    target_link_libraries(lingmoshell KF6::UserFeedbackCore)
    target_compile_definitions(lingmoshell PRIVATE -DWITH_KUSERFEEDBACKCORE)
endif()

target_include_directories(lingmoshell PRIVATE "${CMAKE_BINARY_DIR}")
target_compile_definitions(lingmoshell PRIVATE -DPROJECT_VERSION="${PROJECT_VERSION}")

if(HAVE_X11)
  target_link_libraries(lingmoshell XCB::XCB XCB::RANDR)
endif()

if(PROJECT_VERSION_PATCH GREATER_EQUAL 80 OR PROJECT_VERSION_MINOR GREATER_EQUAL 80)
    target_link_libraries(lingmoshell KF6::KIOGui)
endif()

configure_file(org.kde.lingmoshell.desktop.cmake ${CMAKE_CURRENT_BINARY_DIR}/org.kde.lingmoshell.desktop @ONLY)

install(TARGETS lingmoshell ${KDE_INSTALL_TARGETS_DEFAULT_ARGS})
install(FILES ${CMAKE_CURRENT_BINARY_DIR}/org.kde.lingmoshell.desktop DESTINATION ${KDE_INSTALL_APPDIR})
install(FILES ${CMAKE_CURRENT_BINARY_DIR}/org.kde.lingmoshell.desktop DESTINATION ${KDE_INSTALL_AUTOSTARTDIR})
install( FILES dbus/org.kde.LingmoShell.xml DESTINATION ${KDE_INSTALL_DBUSINTERFACEDIR} )

ecm_install_configured_files(INPUT lingmo-lingmoshell.service.in @ONLY DESTINATION  ${KDE_INSTALL_SYSTEMDUSERUNITDIR})

add_subdirectory(packageplugins)
if(BUILD_TESTING)
   add_subdirectory(autotests)
   add_subdirectory(tests)
endif()

add_subdirectory(kconf_update)
